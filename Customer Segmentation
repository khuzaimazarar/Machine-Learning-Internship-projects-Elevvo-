#task 2
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans, DBSCAN
from sklearn.metrics import silhouette_score
import seaborn as sns

# Load the data
df = pd.read_csv('Mall_Customers.csv')

# Display basic info
print("Data Overview:")
print(df.head())
print("\nData Info:")
print(df.info())
print("\nDescriptive Statistics:")
print(df.describe())

# Select features for clustering
X = df[['Annual Income (k$)', 'Spending Score (1-100)']]

# Standardize the data
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Determine optimal number of clusters using Elbow Method and Silhouette Score
wcss = []  # Within-Cluster Sum of Squares
silhouette_scores = []
max_clusters = 10

for i in range(2, max_clusters+1):
    kmeans = KMeans(n_clusters=i, init='k-means++', random_state=42)
    kmeans.fit(X_scaled)
    wcss.append(kmeans.inertia_)
    silhouette_scores.append(silhouette_score(X_scaled, kmeans.labels_))

# Plot Elbow Method
plt.figure(figsize=(12, 5))
plt.subplot(1, 2, 1)
plt.plot(range(2, max_clusters+1), wcss, marker='o')
plt.title('Elbow Method')
plt.xlabel('Number of clusters')
plt.ylabel('WCSS')

# Plot Silhouette Scores
plt.subplot(1, 2, 2)
plt.plot(range(2, max_clusters+1), silhouette_scores, marker='o')
plt.title('Silhouette Scores')
plt.xlabel('Number of clusters')
plt.ylabel('Silhouette Score')
plt.tight_layout()
plt.show()

# Based on the plots, select optimal number of clusters (let's choose 5)
optimal_clusters = 5

# Apply K-Means with optimal clusters
kmeans = KMeans(n_clusters=optimal_clusters, init='k-means++', random_state=42)
clusters = kmeans.fit_predict(X_scaled)

# Add cluster labels to the original dataframe
df['Cluster'] = clusters

# Visualize the clusters
plt.figure(figsize=(10, 6))
sns.scatterplot(data=df, x='Annual Income (k$)', y='Spending Score (1-100)', 
                hue='Cluster', palette='viridis', s=100)
plt.scatter(kmeans.cluster_centers_[:, 0]*scaler.scale_[0] + scaler.mean_[0], 
            kmeans.cluster_centers_[:, 1]*scaler.scale_[1] + scaler.mean_[1], 
            s=300, c='red', marker='X', label='Centroids')
plt.title('Customer Segments (K-Means Clustering)')
plt.legend()
plt.grid(True)
plt.show()

# Analyze cluster characteristics
cluster_summary = df.groupby('Cluster').agg({
    'Annual Income (k$)': ['mean', 'median', 'min', 'max'],
    'Spending Score (1-100)': ['mean', 'median', 'min', 'max'],
    'CustomerID': 'count'
}).rename(columns={'CustomerID': 'Count'})

print("\nCluster Summary:")
print(cluster_summary)

# Bonus: Try DBSCAN clustering
dbscan = DBSCAN(eps=0.5, min_samples=5)
dbscan_clusters = dbscan.fit_predict(X_scaled)

# Add DBSCAN clusters to dataframe
df['DBSCAN_Cluster'] = dbscan_clusters

# Visualize DBSCAN clusters
plt.figure(figsize=(10, 6))
sns.scatterplot(data=df, x='Annual Income (k$)', y='Spending Score (1-100)', 
                hue='DBSCAN_Cluster', palette='tab10', s=100)
plt.title('Customer Segments (DBSCAN Clustering)')
plt.legend()
plt.grid(True)
plt.show()

# Count points in each DBSCAN cluster (including noise points labeled as -1)
print("\nDBSCAN Cluster Counts:")
print(df['DBSCAN_Cluster'].value_counts())

# Bonus: Analyze average spending per cluster (K-Means)
print("\nAverage Spending Score per Cluster (K-Means):")
print(df.groupby('Cluster')['Spending Score (1-100)'].mean().sort_values(ascending=False))
